#include "dn/Utils.hpp"
#include <sstream>

std::vector<std::string> dn::split(const std::string &p_str, const char &p_delimiter, const bool &p_keepEmpty)
{
	std::vector<std::string> sp;
	std::istringstream str_stream(p_str);
	std::string tk;

	while (std::getline(str_stream, tk, p_delimiter))
		if (p_keepEmpty || !tk.empty())
			sp.push_back(tk);
	return (sp);
}

#include "dn/KeyCode.hpp"
#include <map>

static const std::map<dn::KeyCode, std::string> g_keyNames = {
			{dn::KeyCode::unknown, ""},
			{dn::KeyCode::space, " "},
			{dn::KeyCode::appostrophe, "'"},
			{dn::KeyCode::comma, ","},
			{dn::KeyCode::minus, "-"},
			{dn::KeyCode::period, "."},
			{dn::KeyCode::slash, "/"},
			{dn::KeyCode::alpha0, "0"},
			{dn::KeyCode::alpha1, "1"},
			{dn::KeyCode::alpha2, "2"},
			{dn::KeyCode::alpha3, "3"},
			{dn::KeyCode::alpha4, "4"},
			{dn::KeyCode::alpha5, "5"},
			{dn::KeyCode::alpha6, "6"},
			{dn::KeyCode::alpha7, "7"},
			{dn::KeyCode::alpha8, "8"},
			{dn::KeyCode::alpha9, "9"},
			{dn::KeyCode::semicolon, ";"},
			{dn::KeyCode::equal, "="},
			{dn::KeyCode::A, "A"},
			{dn::KeyCode::B, "B"},
			{dn::KeyCode::C, "C"},
			{dn::KeyCode::D, "D"},
			{dn::KeyCode::E, "E"},
			{dn::KeyCode::F, "F"},
			{dn::KeyCode::G, "G"},
			{dn::KeyCode::H, "H"},
			{dn::KeyCode::I, "I"},
			{dn::KeyCode::J, "J"},
			{dn::KeyCode::K, "K"},
			{dn::KeyCode::L, "L"},
			{dn::KeyCode::M, "M"},
			{dn::KeyCode::N, "N"},
			{dn::KeyCode::O, "O"},
			{dn::KeyCode::P, "P"},
			{dn::KeyCode::Q, "Q"},
			{dn::KeyCode::R, "R"},
			{dn::KeyCode::S, "S"},
			{dn::KeyCode::T, "T"},
			{dn::KeyCode::U, "U"},
			{dn::KeyCode::V, "V"},
			{dn::KeyCode::W, "W"},
			{dn::KeyCode::X, "X"},
			{dn::KeyCode::Y, "Y"},
			{dn::KeyCode::Z, "Z"},
			{dn::KeyCode::leftBracket, "["},
			{dn::KeyCode::backslash, "\\"},
			{dn::KeyCode::rightBracket, "]"},
			{dn::KeyCode::graveAccent, "`"},
			{dn::KeyCode::world1, "non-US #1"},
			{dn::KeyCode::world2, "non-US #2"},
			{dn::KeyCode::escape, ""},
			{dn::KeyCode::enter, "\n"},
			{dn::KeyCode::tab, "\t"},
			{dn::KeyCode::backspace, ""},
			{dn::KeyCode::insert, ""},
			{dn::KeyCode::delete_key, ""},
			{dn::KeyCode::rightArrow, ""},
			{dn::KeyCode::leftArrow, ""},
			{dn::KeyCode::upArrow, ""},
			{dn::KeyCode::downArrow, ""},
			{dn::KeyCode::pageUp, ""},
			{dn::KeyCode::pageDown, ""},
			{dn::KeyCode::home, ""},
			{dn::KeyCode::end, ""},
			{dn::KeyCode::capsLock, ""},
			{dn::KeyCode::scrollLock, ""},
			{dn::KeyCode::numLock, ""},
			{dn::KeyCode::printScreen, ""},
			{dn::KeyCode::pause, ""},
			{dn::KeyCode::f1, "f1"},
			{dn::KeyCode::f2, "f2"},
			{dn::KeyCode::f3, "f3"},
			{dn::KeyCode::f4, "f4"},
			{dn::KeyCode::f5, "f5"},
			{dn::KeyCode::f6, "f6"},
			{dn::KeyCode::f7, "f7"},
			{dn::KeyCode::f8, "f8"},
			{dn::KeyCode::f9, "f9"},
			{dn::KeyCode::f10, "f10"},
			{dn::KeyCode::f11, "f11"},
			{dn::KeyCode::f12, "f12"},
			{dn::KeyCode::f13, "f13"},
			{dn::KeyCode::f14, "f14"},
			{dn::KeyCode::f15, "f15"},
			{dn::KeyCode::f16, "f16"},
			{dn::KeyCode::f17, "f17"},
			{dn::KeyCode::f18, "f18"},
			{dn::KeyCode::f19, "f19"},
			{dn::KeyCode::f20, "f20"},
			{dn::KeyCode::f21, "f21"},
			{dn::KeyCode::f22, "f22"},
			{dn::KeyCode::f23, "f23"},
			{dn::KeyCode::f24, "f24"},
			{dn::KeyCode::f25, "f25"},
			{dn::KeyCode::keyPad0, "0"},
			{dn::KeyCode::keyPad1, "1"},
			{dn::KeyCode::keyPad2, "2"},
			{dn::KeyCode::keyPad3, "3"},
			{dn::KeyCode::keyPad4, "4"},
			{dn::KeyCode::keyPad5, "5"},
			{dn::KeyCode::keyPad6, "6"},
			{dn::KeyCode::keyPad7, "7"},
			{dn::KeyCode::keyPad8, "8"},
			{dn::KeyCode::keyPad9, "9"},
			{dn::KeyCode::keypadDecimal, ""},
			{dn::KeyCode::keypadDivide, "/"},
			{dn::KeyCode::keypadMultiply, "*"},
			{dn::KeyCode::keypadPlus, "+"},
			{dn::KeyCode::keypadMinus, "-"},
			{dn::KeyCode::keypadEnter, "\n"},
			{dn::KeyCode::keypadEqual, "="},
			{dn::KeyCode::leftAlt, ""},
			{dn::KeyCode::leftShift, ""},
			{dn::KeyCode::leftControl, ""},
			{dn::KeyCode::leftSuper, ""},
			{dn::KeyCode::rightShift, ""},
			{dn::KeyCode::rightControl, ""},
			{dn::KeyCode::rightAlt, ""},
			{dn::KeyCode::rightSuper, ""},
			{dn::KeyCode::menu, ""},
};

std::string dn::getKeyName(const dn::KeyCode &p_keyCode)
{
	return (g_keyNames.at(p_keyCode));
}
