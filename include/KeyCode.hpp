#ifndef DN_KEYCODE_HPP
# define DN_KEYCODE_HPP

# include "Codes.hpp"
# include <string>

namespace dn
{
	enum KeyCode {
		unknown			= DN_KEY_UNKNOWN,
		space			= DN_KEY_SPACE,
		appostrophe		= DN_KEY_APPOSTROPHE,
		comma			= DN_KEY_COMMA,
		minus			= DN_KEY_MINUS,
		period			= DN_KEY_PERIOD,
		slash			= DN_KEY_SLASH,
		alpha0			= DN_KEY_0,
		alpha1			= DN_KEY_1,
		alpha2			= DN_KEY_2,
		alpha3			= DN_KEY_3,
		alpha4			= DN_KEY_4,
		alpha5			= DN_KEY_5,
		alpha6			= DN_KEY_6,
		alpha7			= DN_KEY_7,
		alpha8			= DN_KEY_8,
		alpha9			= DN_KEY_9,
		semicolon		= DN_KEY_SEMICOLON,
		equal			= DN_KEY_EQUAL,
		A				= DN_KEY_A,
		B				= DN_KEY_B,
		C				= DN_KEY_C,
		D				= DN_KEY_D,
		E				= DN_KEY_E,
		F				= DN_KEY_F,
		G				= DN_KEY_G,
		H				= DN_KEY_H,
		I				= DN_KEY_I,
		J				= DN_KEY_J,
		K				= DN_KEY_K,
		L				= DN_KEY_L,
		M				= DN_KEY_M,
		N				= DN_KEY_N,
		O				= DN_KEY_O,
		P				= DN_KEY_P,
		Q				= DN_KEY_Q,
		R				= DN_KEY_R,
		S				= DN_KEY_S,
		T				= DN_KEY_T,
		U				= DN_KEY_U,
		V				= DN_KEY_V,
		W				= DN_KEY_W,
		X				= DN_KEY_X,
		Y				= DN_KEY_Y,
		Z				= DN_KEY_Z,
		leftBracket		= DN_KEY_LEFT_BRACKET,
		backslash		= DN_KEY_BACKSLASH,
		rightBracket	= DN_KEY_RIGHT_BRACKET,
		graveAccent		= DN_KEY_GRAVE_ACCENT,
		world1			= DN_KEY_WORLD_1,
		world2			= DN_KEY_WORLD_2,
		escape			= DN_KEY_ESCAPE,
		enter			= DN_KEY_ENTER,
		tab				= DN_KEY_TAB,
		backspace		= DN_KEY_BACKSPACE,
		insert			= DN_KEY_INSERT,
		delete_key		= DN_KEY_DELETE,
		rightArrow		= DN_KEY_RIGHT,
		leftArrow		= DN_KEY_LEFT,
		upArrow			= DN_KEY_UP,
		downArrow		= DN_KEY_DOWN,
		pageUp			= DN_KEY_PAGE_UP,
		pageDown		= DN_KEY_PAGE_DOWN,
		home			= DN_KEY_HOME,
		end				= DN_KEY_END,
		capsLock		= DN_KEY_CAPS_LOCK,
		scrollLock		= DN_KEY_SCROLL_LOCK,
		numLock			= DN_KEY_NUM_LOCK,
		printScreen		= DN_KEY_PRINT_SCREEN,
		pause			= DN_KEY_PAUSE,
		f1				= DN_KEY_F1,
		f2				= DN_KEY_F2,
		f3				= DN_KEY_F3,
		f4				= DN_KEY_F4,
		f5				= DN_KEY_F5,
		f6				= DN_KEY_F6,
		f7				= DN_KEY_F7,
		f8				= DN_KEY_F8,
		f9				= DN_KEY_F9,
		f10				= DN_KEY_F10,
		f11				= DN_KEY_F11,
		f12				= DN_KEY_F12,
		f13				= DN_KEY_F13,
		f14				= DN_KEY_F14,
		f15				= DN_KEY_F15,
		f16				= DN_KEY_F16,
		f17				= DN_KEY_F17,
		f18				= DN_KEY_F18,
		f19				= DN_KEY_F19,
		f20				= DN_KEY_F20,
		f21				= DN_KEY_F21,
		f22				= DN_KEY_F22,
		f23				= DN_KEY_F23,
		f24				= DN_KEY_F24,
		f25				= DN_KEY_F25,
		keyPad0			= DN_KEY_KP_0,
		keyPad1			= DN_KEY_KP_1,
		keyPad2			= DN_KEY_KP_2,
		keyPad3			= DN_KEY_KP_3,
		keyPad4			= DN_KEY_KP_4,
		keyPad5			= DN_KEY_KP_5,
		keyPad6			= DN_KEY_KP_6,
		keyPad7			= DN_KEY_KP_7,
		keyPad8			= DN_KEY_KP_8,
		keyPad9			= DN_KEY_KP_9,
		keypadDecimal	= DN_KEY_KP_DECIMAL,
		keypadDivide	= DN_KEY_KP_DIVIDE,
		keypadMultiply	= DN_KEY_KP_MULTIPLY,
		keypadMinus		= DN_KEY_KP_SUBTRACT,
		keypadPlus		= DN_KEY_KP_ADD,
		keypadEnter		= DN_KEY_KP_ENTER,
		keypadEqual		= DN_KEY_KP_EQUAL,
		leftAlt			= DN_KEY_LEFT_ALT,
		leftShift		= DN_KEY_LEFT_SHIFT,
		leftControl		= DN_KEY_LEFT_CONTROL,
		leftSuper		= DN_KEY_LEFT_SUPER,
		rightShift		= DN_KEY_RIGHT_SHIFT,
		rightControl	= DN_KEY_RIGHT_CONTROL,
		rightAlt		= DN_KEY_RIGHT_ALT,
		rightSuper		= DN_KEY_RIGHT_SUPER,
		menu			= DN_KEY_MENU,
	};

	enum Mod {
		control = DN_MOD_CONTROL,
		shift = DN_MOD_SHIFT,
		alt = DN_MOD_ALT,
		super = DN_MOD_SUPER
	};

	std::string getKeyName(const dn::KeyCode &p_keyCode);

	enum MouseButton {
		mouse1		= DN_MOUSE_1,
		mouse2		= DN_MOUSE_2,
		mouse3		= DN_MOUSE_3,
		mouse4		= DN_MOUSE_4,
		mouse5		= DN_MOUSE_5,
		mouse6		= DN_MOUSE_6,
		mouse7		= DN_MOUSE_7,
		mouse8		= DN_MOUSE_8,
		left	= DN_MOUSE_LEFT,
		right	= DN_MOUSE_RIGHT,
		middle	= DN_MOUSE_MIDDLE
	};

	enum Action {
		pressed = DN_PRESS,
		released = DN_RELEASE,
		repeat = DN_REPEAT
	};
}

#endif // DN_KEYCODE_HPP
